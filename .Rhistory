x.new <- runif(100,0,1)
x.new <- sort(x.new)
kernel_epan <- function(x, h = 1) {
x <- x / h
ran <- as.numeric(abs(x) <= 1)
val <- (3/4) * ( 1 - x^2 ) * ran
return(val)
}
kernel_reg <- function(x, x.new, h) {
sapply(x.new, function(v) {
yhat <- mean(kernel_epan((v-x),h))/h
yhat
})
}
h = c(0.1, 0.2, 0.3, 0.5,1)
i=1
for (i in h){
plot(x.new, kernel_reg(x,x.new,i), ylab = "Estimation", main = "Kernel density", type = "l")
}
casl_util_kernel_epan <- function(x, h=1){
x <- x / h
ran <- as.numeric(abs(x) <= 1)
val <- (3/4) * ( 1 - x^2 ) * ran
val
}
casl_nlm1d_kernel <- function(x, y, x_new, h=1){
sapply(x_new, function(v)
{
w <- casl_util_kernel_epan(abs(x - v), h=h)
yhat <- sum(w * y) / sum(w)
yhat })
}
set.seed(0989087)
x <- runif(50, min = 0, max = 1)
y <- dbeta(x,2,5)
df <- data.frame(x = x, y = y)
plot(x, y,  type = "p")
set.seed(0989087)
x <- runif(1000, min = 0, max = 1)
y <- dbeta(x,2,5)
df <- data.frame(x = x, y = y)
plot(x, y,  type = "p")
plot(x, y,  type = "l")
plot(x, y,  type = "p")
plot(x, y,  type = "l")
plot(x, y,  type = "p")
plot(x, y,  type = "p")
lines(x, y)
x <- runif(2, min = 0, max = 1)
y <- dbeta(x,2,5)
df <- data.frame(x = x, y = y)
plot(x, y,  type = "p")
plot(x, y,  type = "l")
x <- runif(10, min = 0, max = 1)
y <- dbeta(x,2,5)
df <- data.frame(x = x, y = y)
plot(x, y,  type = "l")
plot(x, y,  type = "l")
plot(x, y,  type = "o")
plot(x, y,  type = "p")
plot(x, y,  type = "l")
set.seed(0989087)
x <- runif(1000, min = 0, max = 1)
x
sort(x)
x <- sort(x)
y <- dbeta(x,2,5)
df <- data.frame(x = x, y = y)
plot(x, y,  type = "p")
plot(x, y,  type = "l")
x <- runif(100, min = 0, max = 1)
x <- sort(x)
y <- dbeta(x,2,5)
df <- data.frame(x = x, y = y)
plot(x, y,  type = "p")
plot(x, y,  type = "l")
x <- runif(10000, min = 0, max = 1)
x <- sort(x)
y <- dbeta(x,2,5)
df <- data.frame(x = x, y = y)
plot(x, y,  type = "b")
plot(x, y,  type = "l")
plot(x, y,  type = "o")
plot(x, y,  type = "l")
x_new <- runif(50, min = 0, max = 1)
y_new <- casl_nlm1d_kernel(x, y, x_new, h = 0.1)
plot(y_new ~ x_new)
kernel_reg <- function(x, x.new, h) {
sapply(x.new, function(v) {
yhat <- mean(kernel_epan((v-x),h))/h
yhat
})
}
y_new <- casl_nlm1d_kernel(x, y, x_new, h = 0.1)
plot(y_new ~ x_new)
set.seed(987987)
x_new <- runif(50, min = 0, max = 1)
y_new <- casl_nlm1d_kernel(x, y, x_new, h = 0.1)
plot(y_new ~ x_new)
x_new <- sort(runif(50, min = 0, max = 1))
y_new <- casl_nlm1d_kernel(x, y, x_new, h = 0.1)
plot(y_new ~ x_new)
set.seed(987987)
x_new <- sort(runif(50, min = 0, max = 1))
y_new <- casl_nlm1d_kernel(x, y, x_new, h = 0.1)
plot(y_new ~ x_new)
set.seed(0989087)
x <- runif(10000, min = 0, max = 1)
x <- sort(x)
y <- dbeta(x,2,5)
# plot
plot(x, y,  type = "l")
hist(x)
kernel_reg <- function(x, x.new, h){
sapply(x.new, function(v) {
yhat <- mean(kernel_epan((v-x),h))/h
yhat
})
}
barplot(x, y,  type = "l")
barplot(y~x,  type = "l")
barplot(y~x)
hist(y)
hist(x)
barplot(y~x)
set.seed(0989087)
x <- runif(10000, min = 0, max = 1)
x <- sort(x)
y <- dbeta(x,2,5)
# plot
barplot(y~x)
barplot(y~x, type = "l")
set.seed(0989087)
x <- runif(10000, min = 0, max = 1)
x <- sort(x)
y <- dbeta(x,2,5)
barplot(y~x, type = "l")
plot(y~x, type = "l")
x <- runif(100, min =0, max =1)
set.seed(0989087)
x <- runif(10000, min = 0, max = 1)
x <- sort(x)
y <- dbeta(x,2,5)
# plot
plot(y~x, type = "l")
set.seed(70897)
x_new <- runif(100, min  =0, max =1)
h <- seq(0.1, 1, by = 0.1)
plot(y~x, type = "l")
kernel_reg <- function(x, x_new, h){
sapply(x_new, function(v) {
yhat <- mean(kernel_epan((v-x),h))/h
yhat
})
}
set.seed(70897)
x_new <- runif(100, min  =0, max =1)
h <- seq(0.1, 1, by = 0.1)
for(i in 1:length(h)){
lines(x_new, kernel_reg(x, x_new, h[i]), col = i, type = "l")
}
set.seed(70897)
x_new <- sort(runif(100, min  =0, max =1))
h <- seq(0.1, 1, by = 0.1)
for(i in 1:length(h)){
lines(x_new, kernel_reg(x, x_new, h[i]), col = i, type = "l")
}
casl_util_kernel_epan <- function(x, h=1){
x <- x / h
ran <- as.numeric(abs(x) <= 1)
val <- (3/4) * ( 1 - x^2 ) * ran
val
}
kernel_reg <- function(x, x_new, h){
sapply(x_new, function(v) {
yhat <- mean(casl_util_kernel_epan((v-x),h))/h
yhat
})
}
set.seed(0989087)
x <- runif(10000, min = 0, max = 1)
x <- sort(x)
y <- dbeta(x,2,5)
plot(y~x, type = "l")
set.seed(70897)
x_new <- sort(runif(100, min  =0, max =1))
h <- seq(0.1, 1, by = 0.1)
for(i in 1:length(h)){
lines(x_new, kernel_reg(x, x_new, h[i]), col = i, type = "l")
}
set.seed(70897)
x_new <- sort(runif(100, min  =0, max =1))
h <- seq(0.001, 0.1, by = 0.01)
for(i in 1:length(h)){
lines(x_new, kernel_reg(x, x_new, h[i]), col = i, type = "l")
}
for (i in h){
plot(x.new, kernel_reg(x,x.new,i), ylab = "Estimation", main = "Kernel density", type = "l")
}
h <- seq(0.1, 0.9, by = 0.1)
h
set.seed(70897)
x_new <- sort(runif(100, min  =0, max =1))
h <- seq(0.1, 0.9, by = 0.1)
for(i in 1:length(h)){
lines(x_new, kernel_reg(x, x_new, h[i]), col = i, type = "l")
}
set.seed(70897)
x_new <- sort(runif(100, min  =0, max =1))
h <- seq(0.1, 0.9, by = 0.1)
for(i in 1:length(h)){
plot(x_new, kernel_reg(x, x_new, h[i]), col = i, type = "l")
}
plot(1, type="n", ylab="Estimate", xlim=c(0, 1))
for(i in 1:length(h)){
plot(x_new, kernel_reg(x, x_new, h[i]), col = i, type = "l")
}
plot(1, type="n", ylab="Estimate", xlim=c(0, 1))
for(i in 1:length(h)){
lines(x_new, kernel_reg(x, x_new, h[i]), col = i, type = "l")
}
set.seed(70897)
x_new <- sort(runif(100, min  =0, max =1))
h <- seq(0.1, 0.9, by = 0.1)
plot(1, type="n", ylab="Estimate", xlim=c(0, 1), ylim = c(0, 1.2))
for(i in 1:length(h)){
lines(x_new, kernel_reg(x, x_new, h[i]), col = i, type = "l")
}
plot(1, type="n", ylab="Estimate", xlim=c(0, 1))
for(i in 1:length(h)){
lines(x_new, kernel_reg(x, x_new, h[i]), col = i, type = "l")
}
set.seed(70897)
x_new <- sort(runif(100, min  =0, max =1))
h <- seq(0.1, 0.9, by = 0.1)
plot(1, type="n", ylab="Estimate", xlim=c(0, 1), ylim = c(0.6, 1.2))
for(i in 1:length(h)){
lines(x_new, kernel_reg(x, x_new, h[i]), col = i, type = "l")
}
set.seed(70897)
x_new <- sort(runif(100, min  =0, max =1))
h <- seq(0.1, 0.9, by = 0.1)
legend_text <- c()
plot(1, type="n", ylab="Estimate", xlim=c(0, 1), ylim = c(0.6, 1.2))
for(i in 1:length(h)){
lines(x_new, kernel_reg(x, x_new, h[i]), col = i, type = "l")
legend_text <- c(legend_text, paste0("h = ", h[i]))
legend('topright', legend = legend_text, col=1:length(h))
}
legend('topright', legend = legend_text, col=1:length(h), inset=c(-0.2,0))
set.seed(70897)
x_new <- sort(runif(100, min  =0, max =1))
h <- seq(0.1, 0.9, by = 0.1)
legend_text <- c()
plot(1, type="n", ylab="Estimate", xlim=c(0, 1), ylim = c(0.6, 1.2))
for(i in 1:length(h)){
lines(x_new, kernel_reg(x, x_new, h[i]), col = i, type = "l")
legend_text <- c(legend_text, paste0("h = ", h[i]))
}
legend('topright', legend = legend_text, col=1:length(h))
set.seed(70897)
x_new <- sort(runif(100, min  =0, max =1))
h <- seq(0.1, 0.9, by = 0.1)
plot(1, type="n", ylab="Estimate", xlim=c(0, 1), ylim = c(0.6, 1.2))
for(i in 1:length(h)){
plot(x_new, kernel_reg(x, x_new, h[i]), col = i, type = "l",
main = paste0("h = ", h[i]))
}
set.seed(70897)
x_new <- sort(runif(100, min  =0, max =1))
h <- seq(0.1, 0.9, by = 0.1)
plot(1, type="n", ylab="Estimate", xlim=c(0, 1), ylim = c(0.6, 1.2))
for(i in 1:length(h)){
plot(x_new, kernel_reg(x, x_new, h[i]), type = "l",
main = paste0("h = ", h[i]))
}
set.seed(70897)
x_new <- sort(runif(100, min  =0, max =1))
h <- seq(0.1, 0.9, by = 0.1)
for(i in 1:length(h)){
plot(x_new, kernel_reg(x, x_new, h[i]), type = "l",
main = paste0("h = ", h[i]), ylab = "estimate")
}
install.packages("optimx")
kktchk
library(optimx)
kktchk()
kktchk
library(glmnet)
n <- 1000L
n
n <- 100
p <- 50
n <- 100
p <- 500
set.seed(27)
library(glmnet)
library(Matrix)
n <- 1000L
p <- 5000L
X <- matrix(rnorm(n * p), ncol = p)
beta <- c(seq(1, 0.1, length.out=(10L)), rep(0, p - 10L))
y <- X %*% beta + rnorm(n = n, sd = 0.15)
g_new<- cv.glmnet(X, y, alpha=1)
lambda.min <- g_new$lambda.min
beta_hat <- g_new$glmnet.g_new$beta[,which(g_new$lambda == g_new$lambda.min)]
lasso_reg_with_screening <- function(X, y, b, lambda) {
resids <- y - X %*% b
res <- apply(X, 2, function(xj) crossprod(xj, resids)) / lambda / nrow(X)
(b == 0) & (abs(res) >= 1)
}
lasso_reg_with_screening <- function(X, y, b, lambda) {
resids <- y - X %*% b
res <- apply(X, 2, function(xj) crossprod(xj, resids)) / lambda / nrow(X)
(b == 0) & (abs(res) >= 1)
}
lasso_reg_with_screening <- function(X, y, b, lambda) {
resids <- y - X %*% b
res <- apply(X, 2, function(xj) crossprod(xj, resids)) / lambda / nrow(X)
return((b == 0) & (abs(res) >= 1))
}
lasso_reg_with_screening(X, y, beta_hat, lambda.min)
lasso_reg_with_screening <- function(X, y, b, lambda) {
resids <- y - X %*% b
res <- apply(X, 2, function(xj) crossprod(xj, resids)) / lambda / nrow(X)
return((b == 0) & (abs(res) >= 1))
}
beta_hat
beta_hat <- g_new$glmnet.g_new$beta[,which(g_new$lambda == g_new$lambda.min)]
lasso_reg_with_screening(X, y, beta, lambda.min)
beta
beta <- c(seq(1, 0.1, length.out=(10L)), rep(0, p - 10L))
beta
casl_lenet_check_kkt <- function(X, y, b, lambda){
resids <- y - X %*% b
s <- apply(X, 2, function(xj) crossprod(xj, resids)) /
lambda / nrow(X)
# Return a vector indicating where the KKT conditions have
# been violated by the variables that are currently zero.
(b == 0) & (abs(s) >= 1)
}
beta <- c(seq(1, 0.1, length.out=(10L)), rep(0, p - 10L))
beta
dim(iris)
iris$Sepal.Length
View(iris)
dim(iris)
x <- scale(model.matrix(Sepal.Length ~. -1, iris))
x
y <- iris[,1]
y
X <- matrix(rnorm(n * p), ncol = p)
X
rm(X)
n <- 1000L
p <- 5000L
X <- matrix(rnorm(n * p), ncol = p)
X
set.seed(1)
n <- 1000L
p <- 5000L
X <- matrix(rnorm(n * p), ncol = p)
X
X
set.seed(1)
n <- 1000L
p <- 5000L
X <- matrix(rnorm(n * p), ncol = p)
X
beta <- c(seq(1, 0.1, length.out=(10L)), rep(0, p - 10L))
beta
rm(X)
set.seed(1)
n <- 1000L
p <- 5000L
X <- matrix(rnorm(n * p), ncol = p)
X
set.seed(8907)
n <- 1000L
p <- 5000L
X <- matrix(rnorm(n * p), ncol = p)
beta <- c(seq(1, 0.1, length.out=(10L)), rep(0, p - 10L))
y <- X %*% beta + rnorm(n = n, sd = 0.15)
cv.glmnet(x,y,alpha=1)
cv.glmnet(X,y,alpha=1)
cv.glmnet(X,y,alpha=1) %>% plot()
library(dplyr)
cv.glmnet(X,y,alpha=1) %>% plot()
m1 <- cv.glmnet(X,y,alpha=1)
m1$lambda.min
lasso_reg_with_screening <- function(x, y){
m1 <- cv.glmnet(x,y,alpha=1) # fit lasso regression
lambda_min <- m1$lambda.min # lambda with the smallest MSE
beta <- m1$glmnet.fit$beta[, m1$lambda == lambda_min]
print(beta)
casl_lenet_check_kkt(X, y, beta, lambda)
}
result <-lasso_reg_with_screening(X, y)
lasso_reg_with_screening <- function(x, y){
m1 <- cv.glmnet(x,y,alpha=1) # fit lasso regression
lambda_min <- m1$lambda.min # lambda with the smallest MSE
beta <- m1$glmnet.fit$beta[, m1$lambda == lambda_min]
print(beta)
casl_lenet_check_kkt(X, y, beta, lambda_min)
}
result <-lasso_reg_with_screening(X, y)
result
lasso_reg_with_screening(X, y)
lasso_reg_with_screening <- function(x, y){
m1 <- cv.glmnet(x,y,alpha=1) # fit lasso regression
lambda_min <- m1$lambda.min # lambda with the smallest MSE
beta <- m1$glmnet.fit$beta[, m1$lambda == lambda_min]
casl_lenet_check_kkt(X, y, beta, lambda_min)
}
lasso_reg_with_screening(X, y)
result <- lasso_reg_with_screening(X, y)
beta
lambda_seq = seq(0.01, 1000, by=0.1)
MSEs = rep(NA, length(lambda_seq))
for (i in 1:length(lambda_seq)){
fit = ridge_reg(y ~., lambda_seq[i], ridge_train)
error = ridge_test$y - predict(fit, ridge_test)
MSEs[i] = mean(error^2)
}
ridge_reg<-function(formula, lambda, data){
rownames(data) = NULL
m<-model.matrix(formula, data)
y<-matrix(data[,as.character(formula)[2]],ncol=1)
y<-y[as.numeric(rownames(m)),,drop=FALSE]
#Fit via svd
svd_obj<-svd(m)
U<-svd_obj$u
V<-svd_obj$v
svals<-svd_obj$d
D<-diag(svals/(svals^2 +lambda))
beta<-V %*% D %*% t(U) %*% y
rownames(beta) = colnames(m)
ret<- list(coefficients = beta, lambda=lambda,formula=formula)
class(ret)<-"ridge_reg"
ret
}#function end
%*%
ridge_reg<-function(formula, lambda, data){
rownames(data) = NULL
m<-model.matrix(formula, data)
y<-matrix(data[,as.character(formula)[2]],ncol=1)
y<-y[as.numeric(rownames(m)),,drop=FALSE]
#Fit via svd
svd_obj<-svd(m)
U<-svd_obj$u
V<-svd_obj$v
svals<-svd_obj$d
D<-diag(svals/(svals^2 +lambda))
beta<-V %*% D %*% t(U) %*% y
rownames(beta) = colnames(m)
ret<- list(coefficients = beta, lambda=lambda,formula=formula)
class(ret)<-"ridge_reg"
ret
}#function end
lambda_seq = seq(0.01, 1000, by=0.1)
MSEs = rep(NA, length(lambda_seq))
for (i in 1:length(lambda_seq)){
fit = ridge_reg(y ~., lambda_seq[i], ridge_train)
error = ridge_test$y - predict(fit, ridge_test)
MSEs[i] = mean(error^2)
}
load("/Users/panyujun/Desktop/HW/bis557/data/ridge_train.rda")
load("/Users/panyujun/Desktop/HW/bis557/data/ridge_test.rda")
lambda_seq = seq(0.01, 1000, by=0.1)
MSEs = rep(NA, length(lambda_seq))
for (i in 1:length(lambda_seq)){
fit = ridge_reg(y ~., lambda_seq[i], ridge_train)
error = ridge_test$y - predict(fit, ridge_test)
MSEs[i] = mean(error^2)
}
predict.ridge_reg = function(object,...) {
newdata = list(...)[[1]]
m = model.matrix(object$form, newdata)
m %*% object$coefficients
}
lambda_seq = seq(0.01, 1000, by=0.1)
MSEs = rep(NA, length(lambda_seq))
for (i in 1:length(lambda_seq)){
fit = ridge_reg(y ~., lambda_seq[i], ridge_train)
error = ridge_test$y - predict(fit, ridge_test)
MSEs[i] = mean(error^2)
}
plot(log(lambda_seq), MSEs, xlab = "log(lambda)", ylab = "Out-of-Sample MSE")
lambda_seq[which.min(MSEs)]
data(ridge_train)
lambda <- 1.2121212
ridge_train_scale <- as.data.frame(scale(ridge_train))
fit_ridge <- ridge_reg(y ~. - 1, lambda, ridge_train_scale)
expect_equivalent(fit_ridge$coef,
c(0.30854117, -0.27991787,  0.04860966, 0.03427351), tolerance = 1e-5)
data(ridge_train)
lambda <- 1.2121212
ridge_train_scale <- as.data.frame(scale(ridge_train))
fit_ridge <- ridge_reg(y ~. - 1, lambda, ridge_train_scale)
expect_equivalent(fit_ridge$coef,
c(0.30854117, -0.27991787,  0.04860966, 0.03427351), tolerance = 1e-5)
library(testthat)
expect_equivalent(fit_ridge$coef,
c(0.30854117, -0.27991787,  0.04860966, 0.03427351), tolerance = 1e-5)
library(testthat)
getwd()
setwd("/Users/panyujun/Desktop/HW/bis557")
check()
library(devtools)
check()
test()
load("/Users/panyujun/Desktop/GRE/words.Rdata")
