2*((1.645+1.28)/0.03)^2*0.95*0.05
2500/2/0.95/0.05
1.96+1.28
sqrt(2500/2/0.95/0.05)
3.24/162.2214
pnorm(0)
qnorm(1-0.088/2)
qnorm(1-0.04/2)
qnorm(0.8)
trump_tweets <- read.csv("~/Library/Mobile Documents/com~apple~CloudDocs/yale/530/HW5/trump_tweets.csv", as.is = TRUE)
plot(retweetCount ~ favoriteCount, data = trump_tweets)
m1 <- lm(retweetCount ~ favoriteCount, data = trump_tweets)
summary(m1)
abline(m1, col = "red")
qqnorm(resid(m1))
plot(resid(m1) ~ fitted(m1))
m2 <- lm(sqrt(retweetCount + 1) ~ sqrt(favoriteCount + 1), data = trump_tweets)
summary(m2)
qqnorm(resid(m2))
plot(resid(m2) ~ fitted(m2))
qqnorm(resid(m2))
class(trump_tweets$election)
m3 <- lm(sqrt(retweetCount + 1) ~ sqrt(favoriteCount + 1) + election,
data = trump_tweets)
summary(m3)
m4 <- lm(sqrt(retweetCount + 1) ~ sqrt(favoriteCount + 1) + election +
sqrt(favoriteCount + 1) * election,
data = trump_tweets)
summary(m4)
m5 <- lm(sqrt(retweetCount + 1) ~
sqrt(favoriteCount + 1) * election,
data = trump_tweets)
summary(m5)
obs_cor <- cor(trump_tweets$retweetCount, trump_tweets$favoriteCount,
use = "complete.obs")
obs_cor
set.seed(90980980)
sim_cor <- rep(NA, 10000)
for(i in 1:10000){
perm_retweet <- sample(trump_tweets$retweetCount)
#perm_fav <- sample(trump_tweets$favoriteCount)
sim_cor[i] <- cor(perm_retweet, trump_tweets$favoriteCount, use = "complete.obs")
}
hist(sim_cor)
abline(v = obs_cor, col = "red")
mean(sim_cor > 0)
rail_trail<- read.csv("~/Library/Mobile Documents/com~apple~CloudDocs/yale/530/HW5/RailTrail.csv", as.is = TRUE)
m5 <- lm(volume ~ avgtemp + weekday + avgtemp*weekday, data = rail_trail)
rail_trail<- read.csv("~/Library/Mobile Documents/com~apple~CloudDocs/yale/530/HW5/RailTrail.csv", as.is = TRUE)
m5 <- lm(volume ~ avgtemp + weekday + avgtemp*weekday, data = rail_trail)
summary(m5)
predict(m5, newdata = data.frame(avgtemp = 60, weekday = "wkdy"))
predict(m5, newdata = data.frame(avgtemp = 60, weekday = "wknd/holiday"))
SAT <- read.csv("~/Library/Mobile Documents/com~apple~CloudDocs/yale/530/HW5/SAT_by_state.csv", as.is = TRUE)
SAT$SAT <- SAT$SAT_R + SAT$SAT_M
m6 <- lm(SAT ~ teacher_salary, data = SAT)
plot(SAT ~ teacher_salary, data = SAT)
abline(m6, col = "red")
summary(m6)
m7 <- lm(SAT ~ perc_SAT, data = SAT)
plot(SAT ~ perc_SAT, data = SAT)
abline(m7, col = "red")
summary(m7)
names(SAT)
m8 <- lm(SAT ~ teacher_salary + perc_SAT, data = SAT)
summary(m8)
set.seed(90980980)
sim_cor <- rep(NA, 10000)
for(i in 1:10000){
perm_retweet <- sample(trump_tweets$retweetCount, replace = FALSE)
#perm_fav <- sample(trump_tweets$favoriteCount)
sim_cor[i] <- cor(perm_retweet, trump_tweets$favoriteCount, use = "complete.obs")
}
hist(sim_cor)
plot(SAT ~ teacher_salary, data = SAT)
abline(m6, col = "red")
plot(SAT ~ perc_SAT, data = SAT)
abline(m7, col = "red")
plot(resid(m2) ~ fitted(m2))
qqnorm(resid(m2))
qqnorm(resid(m2))
plot(resid(m2) ~ fitted(m2))
qqnorm(resid(m2))
plot(resid(m2) ~ fitted(m2))
plot(resid(m2) ~ fitted(m2))
qqnorm(resid(m2))
hist(sim_cor)
obs_cor
for(i in 1:10000){
perm_retweet <- sample(trump_tweets$retweetCount, replace = FALSE)
#perm_fav <- sample(trump_tweets$favoriteCount)
sim_cor[i] <- cor(perm_retweet, trump_tweets$favoriteCount, use = "complete.obs")
}
hist(sim_cor)
mean(sim_cor > 0)
gc()
qqnorm(resid(m1))
m1 <- lm(retweetCount ~ favoriteCount, data = trump_tweets)
summary(m1)
abline(m1, col = "red")
qqnorm(resid(m1))
qqnorm(resid(m1))
m2 <- lm(sqrt(retweetCount + 1) ~ sqrt(favoriteCount + 1), data = trump_tweets)
summary(m2)
qqnorm(resid(m2))
m2 <- lm(log(retweetCount + 1) ~ log(favoriteCount + 1), data = trump_tweets)
summary(m2)
qqnorm(resid(m2))
plot(resid(m2) ~ fitted(m2))
qqnorm(resid(m2))
plot(resid(m2) ~ fitted(m2))
mean(sim_cor > 0)
obs_cor
hist(sim_cor)
summary(m7)
summary(m6)
summary(m7)
predict(m5, newdata = data.frame(avgtemp = 60, weekday = "wkdy"))
predict(m5, newdata = data.frame(avgtemp = 60, weekday = "wknd/holiday"))
qqnorm(resid(m1))
SAT <- read.csv("~/Library/Mobile Documents/com~apple~CloudDocs/yale/530/HW5/SAT_by_state.csv", as.is = TRUE)
class(SAT$SAT_M)
sum(is.na(SAT$SAT_M))
sapply(SAT[, c("SAT_R", "SAT_M")], class)
sapply(SAT[, c("SAT_R", "SAT_M")], function(n)  sum(is.na(n)))
plot(SAT ~ teacher_salary, data = SAT)
SAT <- read.csv("~/Library/Mobile Documents/com~apple~CloudDocs/yale/530/HW5/SAT_by_state.csv", as.is = TRUE)
SAT$SAT <- SAT$SAT_R + SAT$SAT_M
plot(SAT ~ teacher_salary, data = SAT)
names(SAT)
plot(SAT ~ teacher_salary, data = SAT,
main = "Average Teacher Salary vs. Average SAT Score",
xlab = "Average Teacher Salary",
ylab = "Average SAT Score")
abline(m6, col = "red")
summary(m6)
-4.073e-03
plot(SAT ~ perc_SAT, data = SAT)
plot(SAT ~ perc_SAT, data = SAT,
main = "Percentage of Students Taking the SAT vs. Average SAT Score",
xlab = "Percentage of Students Taking the SAT",
ylab = "Average SAT Score")
plot(SAT ~ perc_SAT, data = SAT,
main = "Percentage of Students Taking the SAT vs.\nAverage SAT Score",
xlab = "Percentage of Students Taking the SAT",
ylab = "Average SAT Score")
plot(SAT ~ perc_SAT, data = SAT,
main = "Percentage of Students Taking the SAT vs.\nAverage SAT Score",
xlab = "Percentage of Students Taking the SAT",
ylab = "Average SAT Score")
m7 <- lm(SAT ~ perc_SAT, data = SAT)
abline(m7, col = "red")
summary(m7)
c(m7$qr)
names(summary(m7))
c(summary(m7)$r.squared)
c(summary(m7)$r.squared, summary(m6)$r.squared)
m8 <- lm(SAT ~ teacher_salary + perc_SAT, data = SAT)
summary(m8)
c(summary(m6)$r.squared, summary(m7)$r.squared, summary(m8)$r.squared)
summary(m6)
m5 <- lm(volume ~ avgtemp + weekday + avgtemp*weekday, data = rail_trail)
summary(m5)
unique(rail_trail$weekday)
predict(m5, newdata = data.frame(avgtemp = 60, weekday = "wkdy"))
predict(m5, newdata = data.frame(avgtemp = 60, weekday = "wknd/holiday"))
predict(m5, newdata = data.frame(avgtemp = 60, weekday = "wkdy"))-predict(m5, newdata = data.frame(avgtemp = 60, weekday = "wknd/holiday"))
names(trump_tweets)
mean(sim_cor > obs_cor)
trump_tweets <- read.csv("~/Library/Mobile Documents/com~apple~CloudDocs/yale/530/HW5/trump_tweets.csv", as.is = TRUE)
plot(retweetCount ~ favoriteCount, data = trump_tweets)
mean(sim_cor > 0.0001)
trump_tweets <- read.csv("~/Library/Mobile Documents/com~apple~CloudDocs/yale/530/HW5/trump_tweets.csv", as.is = TRUE)
plot(retweetCount ~ favoriteCount, data = trump_tweets)
qqnorm(resid(m1))
plot(resid(m1) ~ fitted(m1))
plot(log(retweetCount + 1), log(favoriteCount + 1), data = trump_tweets)
plot(log(retweetCount + 1) ~ log(favoriteCount + 1), data = trump_tweets)
class(trump_tweets$election)
plot(retweetCount ~ favoriteCount, data = trump_tweets)
qqnorm(resid(m1))
plot(retweetCount ~ favoriteCount, data = trump_tweets,
main = "Favorite Count vs. Retweet Count",
xlab = "Favorite Count",
ylab = "Retweet Count")
qqnorm(resid(m1))
plot(resid(m1) ~ fitted(m1))
plot(log(retweetCount + 1) ~ log(favoriteCount + 1), data = trump_tweets)
plot(log(retweetCount + 1) ~ log(favoriteCount + 1), data = trump_tweets)
m2 <- lm(log(retweetCount + 1) ~ log(favoriteCount + 1), data = trump_tweets)
summary(m2)
```{r}
qqnorm(resid(m2))
plot(resid(m2) ~ fitted(m2), main = "Fitted vs. Residuals")
plot(log(retweetCount + 1) ~ log(favoriteCount + 1), data = trump_tweets)
plot(log(retweetCount + 1) ~ log(favoriteCount + 1), data = trump_tweets,
main = "log(Favorite Count+1) vs. log(Retweet Count+1)",
xlab = "log(Favorite Count+1)",
ylab = "log(Retweet Count+1)Retweet Count")
plot(log(retweetCount + 1) ~ log(favoriteCount + 1), data = trump_tweets,
main = "log(Favorite Count+1) vs. log(Retweet Count+1)",
xlab = "log(Favorite Count+1)",
ylab = "log(Retweet Count+1)")
m3 <- lm(sqrt(retweetCount + 1) ~ sqrt(favoriteCount + 1) + election,
data = trump_tweets)
summary(m3)
m4 <- lm(sqrt(retweetCount + 1) ~ sqrt(favoriteCount + 1) + election +
sqrt(favoriteCount + 1) * election,
data = trump_tweets)
summary(m4)
m3 <- lm(log(retweetCount + 1) ~ log(favoriteCount + 1) + election,
data = trump_tweets)
summary(m3)
m4 <- lm(log(retweetCount + 1) ~ log(favoriteCount + 1) + election +
log(favoriteCount + 1) * election,
data = trump_tweets)
summary(m4)
m5 <- lm(volume ~ avgtemp + weekday + avgtemp*weekday, data = rail_trail)
summary(m5)
5.757-3.300
plot(retweetCount ~ favoriteCount, data = trump_tweets)
m5 <- lm(volume ~ avgtemp + weekday + avgtemp*weekday, data = rail_trail)
summary(m5)
m6 <- lm(SAT ~ teacher_salary, data = SAT)
summary(m6)
-4.073e-03
setwd("/Users/panyujun/Desktop/HW/bis557")
load_all()
library(devtools)
library(roxygen2)
load_all()
library(devtools)
library(roxygen2)
setwd("/Users/panyujun/Desktop/HW/bis557")
document()
ridge_reg <- function(form, lambda, d){
rownames(data) <- NULL
m <- model.matrix(form, d)
y <- matrix(d[,as.character(form)[2]], ncol = 1)
y <- y[as.numeric(rownames(m)),, drop = FALSE]
svd_obj <- svd(m)
U <- svd_obj$u
V <- svd_obj$v
svals <- svd_obj$d
D <- diag(svals / (svals^2 + lambda))
beta <- V %*% D %*% t(U) %*% y
rownames(beta) <- colnames(m)
ret <- list(coefficients = beta, lambda = lambda, form = form)
class(ret) <- "ridge_reg"
return(ret)
}
data(ridge_test)
data(ridge_train)
lambda = seq(0, 80, by=2)
MSEs = rep(NA, length(lambda))
MSE = rep(NA, length(lambda))
rm(MSEs)
for (i in 1:length(lambda)){
fit = ridge_reg(y ~., lambda[i], ridge_train)
error = ridge_test$y - predict(fit, ridge_test)
MSE[i] = mean(error^2)
}
ridge_reg <- function(form, lambda, d){
rownames(data) <- NULL
m <- model.matrix(form, d)
y <- matrix(d[,as.character(form)[2]], ncol = 1)
y <- y[as.numeric(rownames(m)),, drop = FALSE]
svd_obj <- svd(m)
U <- svd_obj$u
V <- svd_obj$v
svals <- svd_obj$d
D <- diag(svals / (svals^2 + lambda))
beta <- V %*% D %*% t(U) %*% y
rownames(beta) <- colnames(m)
ret <- list(coefficients = beta, lambda = lambda, form = form)
class(ret) <- "ridge_reg"
return(ret)
}
lambda = seq(0, 80, by=2)
MSE = rep(NA, length(lambda))
for (i in 1:length(lambda)){
fit = ridge_reg(y ~., lambda[i], ridge_train)
error = ridge_test$y - predict(fit, ridge_test)
MSE[i] = mean(error^2)
}
lambda_seq = seq(0.01, 1000, by=0.1)
MSEs = rep(NA, length(lambda_seq))
for (i in 1:length(lambda_seq)){
fit = ridge_reg(y ~., lambda_seq[i], ridge_train)
error = ridge_test$y - predict(fit, ridge_test)
MSEs[i] = mean(error^2)
}
predict.ridge_reg = function(object,...) {
newdata = list(...)[[1]]
m = model.matrix(object$form, newdata)
m %*% object$coefficients
}
lambda_seq = seq(0.01, 1000, by=0.1)
MSEs = rep(NA, length(lambda_seq))
for (i in 1:length(lambda_seq)){
fit = ridge_reg(y ~., lambda_seq[i], ridge_train)
error = ridge_test$y - predict(fit, ridge_test)
MSEs[i] = mean(error^2)
}
log(0)
predict.ridge_reg = function(object,...) {
newdata = list(...)[[1]]
m = model.matrix(object$form, newdata)
m %*% object$coefficients
}
lambda = seq(0.1, 80.1, by=0.1)
MSE = rep(NA, length(lambda))
for (i in 1:length(lambda)){
fit = ridge_reg(y ~., lambda[i], ridge_train)
error = ridge_test$y - predict(fit, ridge_test)
MSEs[i] = mean(error^2)
}
plot(log(lambda), MSE, xlab = "log(lambda)", ylab = "Out-of-Sample MSE")
lambda = seq(10, 80.1, by=0.1)
MSE = rep(NA, length(lambda))
for (i in 1:length(lambda)){
fit = ridge_reg(y ~., lambda[i], ridge_train)
error = ridge_test$y - predict(fit, ridge_test)
MSEs[i] = mean(error^2)
}
plot(log(lambda), MSE, xlab = "log(lambda)", ylab = "Out-of-Sample MSE")
lambda = seq(0.01, 10000, by=0.1)
MSE = rep(NA, length(lambda))
for (i in 1:length(lambda)){
fit = ridge_reg(y ~., lambda[i], ridge_train)
error = ridge_test$y - predict(fit, ridge_test)
MSEs[i] = mean(error^2)
}
lambda = seq(0.01, 1000, by=1)
MSE = rep(NA, length(lambda))
for (i in 1:length(lambda)){
fit = ridge_reg(y ~., lambda[i], ridge_train)
error = ridge_test$y - predict(fit, ridge_test)
MSEs[i] = mean(error^2)
}
plot(log(lambda), MSE, xlab = "log(lambda)", ylab = "Out-of-Sample MSE")
lambda = seq(0.01, 1000, by=0.1)
MSE = rep(NA, length(lambda))
for (i in 1:length(lambda)){
fit = ridge_reg(y ~., lambda[i], ridge_train)
error = ridge_test$y - predict(fit, ridge_test)
MSEs[i] = mean(error^2)
}
plot(log(lambda), MSE, xlab = "log(lambda)", ylab = "Out-of-Sample MSE")
predict.ridge_reg = function(object,...) {
newdata = list(...)[[1]]
m = model.matrix(object$form, newdata)
m %*% object$coefficients
}
lambda_seq = lambda_seq = seq(0.01, 1000, by=0.1)
MSEs = rep(NA, length(lambda_seq))
for (i in 1:length(lambda_seq)){
fit = ridge_reg(y ~., lambda_seq[i], ridge_train)
error = ridge_test$y - predict(fit, ridge_test)
MSEs[i] = mean(error^2)
}
plot(log(lambda_seq), MSEs, xlab = "log(lambda)", ylab = "Out-of-Sample MSE")
lambda_seq[which.min(MSEs)]
1/(1+3/2*pi)
1/(1+1/2*pi)
(1+pi)/(1+3/2*pi)
(1+pi)/(1+1/2*pi)
19/18
19/18
19/9
install.packages("car")
400*(sqrt(20/18)-1)
movies <- read.csv("~/Library/Mobile Documents/com~apple~CloudDocs/yale/530/HW6/movies_merged.csv", as.is = TRUE)
genres <- strsplit(movies$Genres, ", ")
class(genres)
genres <- strsplit(movies$Genres, ", ")
class(genres)
genres
movies <- read.csv("~/Library/Mobile Documents/com~apple~CloudDocs/yale/530/HW6/movies_merged.csv", as.is = TRUE)
genres <- strsplit(movies$Genres, ", ")
class(genres)
View(movies)
allgenres <- unlist(genres)
library(dplyr)
table(allgenres) %>% sort()
table(allgenres) %>% sort(., decreasing = TRUE)
sort(table(allgenres), decreasing = TRUE)[1:4]
top4 <- sort(table(allgenres), decreasing = TRUE)[1:4]
names(top4)
library(stringr)
a <- c("a", "b")
a <- "a,b"
a <- "a,b"
grepl("a", a, fixed =  TRUE)
grep("a", a, fixed =  TRUE)
grep(",", a, fixed =  TRUE)
grep("b", a, fixed =  TRUE)
top4
top4 <- names(top4)
top4
for(i in 1:4){
movies[,i] <- ifelse(grepl(i, movies$Genres, 1, 0))
}
for(i in top4){
movies[,i] <- ifelse(grepl(i, movies$Genres, 1, 0))
}
for(i in top4){
movies[,i] <- ifelse(grepl(i, movies$Genres), 1, 0)
}
top4 <- names(sort(table(allgenres), decreasing = TRUE)[1:4])
top4
m1 <- lm(log10(TotalGross) ~ Runtime + Drama + Comedy + Action + Adventure,
data = movies)
summary(m1)
m1 <- lm(log10(TotalGross) ~ Runtime + Drama + Comedy + Action + Adventure,
data = movies)
summary(m1)
movies[, top4] <- sapply(movies[, top4], as.factor)
m1 <- lm(log10(TotalGross) ~ Runtime + Drama + Comedy + Action + Adventure,
data = movies)
summary(m1)
movies$Adventure %>% class()
movies[, top4] <- sapply(movies[, top4], as.factor)
movies$Adventure %>% class()
m2 <- lm(log10(TotalGross) ~ Runtime + Drama + Comedy + Action + Adventure + MPAA, data = movies)
summary(m2)
anova(m1, m2)
railtrail <- read.csv("~/Library/Mobile Documents/com~apple~CloudDocs/yale/530/HW6/RailTrail.csv", as.is = TRUE)
m1 <- lm(volume ~ avgtemp + weeday + avgtemp * weeday, data = railtrail)
m1 <- lm(volume ~ avgtemp + weekday + avgtemp * weeday, data = railtrail)
m1 <- lm(volume ~ avgtemp + weekday + avgtemp * weekday, data = railtrail)
summary(m1)
railtrail$cloudlevel <- cut(railtrail$cloudcover, 3,
labels = c("low", "med", "high"))
table(railtrail$cloudlevel, railtrail$cloudcover)
m2 <- lm(~ avgtemp + weekday + avgtemp * weekday + cloudlevel,
data = railtrail)
m2 <- lm(volume ~ avgtemp + weekday + avgtemp * weekday + cloudlevel,
data = railtrail)
summary(m2)
m2 <- lm(log10(TotalGross) ~ Runtime + Drama + Comedy + Action + Adventure + MPAA, data = movies)
m1 <- lm(log10(TotalGross) ~ Runtime + Drama + Comedy + Action + Adventure,
data = movies)
anova(m1, m2)
summary(m1)
summary(m2)
boxplot(railtrail$cloudlevel)
boxplot(railtrail$cloudlevel ~ railtrail$cloudcover)
boxplot(cloudcover ~ cloudlevel, data = railtrail)
table(railtrail$cloudlevel)
railtrail <- read.csv("~/Library/Mobile Documents/com~apple~CloudDocs/yale/530/HW6/RailTrail.csv", as.is = TRUE)
m1 <- lm(volume ~ avgtemp + weekday + avgtemp * weekday, data = railtrail)
summary(m1)
railtrail$cloudlevel <- cut(railtrail$cloudcover, 3,
labels = c("low", "med", "high"))
table(railtrail$cloudlevel)
boxplot(cloudcover ~ cloudlevel, data = railtrail)
m2 <- lm(volume ~ avgtemp + weekday + avgtemp * weekday + cloudlevel,
data = railtrail)
summary(m2)
m2 <- lm(volume ~ avgtemp + weekday + avgtemp * weekday + cloudlevel,
data = railtrail)
summary(m2)
genres <- strsplit(movies$Genres, ", ")
class(genres)
movies <- read.csv("~/Library/Mobile Documents/com~apple~CloudDocs/yale/530/HW6/movies_merged.csv", as.is = TRUE)
genres <- strsplit(movies$Genres, ", ")
class(genres)
genres
View(movies)
allgenres <- unlist(genres)
table(allgenres) %>% sort(., decreasing = TRUE)
top4 <- names(sort(table(allgenres), decreasing = TRUE)[1:4])
top4
top4 <- names(sort(table(allgenres), decreasing = TRUE)[1:4])
top4
sort(table(allgenres), decreasing = TRUE)[1:4]
unique(allgenres)
unique(allgenres %>% na.omit()) %>% length()
head(movies)
head(movies[,c("Title", "Genres", top4)])
c("Title", "Genres", top4)
for(i in top4){
movies[,i] <- ifelse(grepl(i, movies$Genres), 1, 0)
}
head(movies[,c("Title", "Genres", top4)])
anova(m1, m2)
m3 <- lm(log10(TotalGross) ~ Runtime + Drama + Comedy + Action + Adventure,
data = movies)
summary(m3)
log10(100)
10^-0.264584
10^0.116785
10^0.240772
10^0.338640
m4 <- lm(log10(TotalGross) ~ Runtime + Drama + Comedy + Action + Adventure + MPAA, data = movies)
summary(m4)
unique(movies$MPAA)
anova(m3, m4)
unique(railtrail$volume)
table(allgenres), decreasing = TRUE)
sort(table(allgenres), decreasing = TRUE)
unique(movies$Genres)
unique(allgenres)
10^{-0.264584}
10^{0.264584}
summary(m3)
summary(m4)
summary(m3)
summary(m2)
summary(m1)
38-27
